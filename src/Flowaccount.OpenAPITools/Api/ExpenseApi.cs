/* 
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2-oas3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flowaccount.OpenAPITools.Client;
using Flowaccount.OpenAPITools.Model;

namespace Flowaccount.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExpenseApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accounting categorys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>BusinessCategory</returns>
        BusinessCategory ExpensesCategoriesAccountingGet (string authorization);

        /// <summary>
        /// Accounting categorys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of BusinessCategory</returns>
        ApiResponse<BusinessCategory> ExpensesCategoriesAccountingGetWithHttpInfo (string authorization);
        /// <summary>
        /// Business categorys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>BusinessCategory</returns>
        BusinessCategory ExpensesCategoriesBusinessGet (string authorization);

        /// <summary>
        /// Business categorys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of BusinessCategory</returns>
        ApiResponse<BusinessCategory> ExpensesCategoriesBusinessGetWithHttpInfo (string authorization);
        /// <summary>
        /// List expense documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ExpenseDocumentResponse</returns>
        ExpenseDocumentResponse ExpensesGet (string authorization);

        /// <summary>
        /// List expense documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of ExpenseDocumentResponse</returns>
        ApiResponse<ExpenseDocumentResponse> ExpensesGetWithHttpInfo (string authorization);
        /// <summary>
        /// Add Attachment to expense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns></returns>
        void ExpensesIdAttachmentPost (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// Add Attachment to expense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExpensesIdAttachmentPostWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// Get expense document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>ExpenseDocumentResponse</returns>
        ExpenseDocumentResponse ExpensesIdGet (string authorization, string id);

        /// <summary>
        /// Get expense document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ExpenseDocumentResponse</returns>
        ApiResponse<ExpenseDocumentResponse> ExpensesIdGetWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Get expense document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>ExpenseInlineDocument</returns>
        ExpenseInlineDocument ExpensesIdInlineGet (string authorization, string id);

        /// <summary>
        /// Get expense document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ExpenseInlineDocument</returns>
        ApiResponse<ExpenseInlineDocument> ExpensesIdInlineGetWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Create expense document with discount and tax inline.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocument"></param>
        /// <returns>ExpensenlineDocumentResponse</returns>
        ExpensenlineDocumentResponse ExpensesInlinePost (string authorization, ExpenseInlineDocument expenseInlineDocument);

        /// <summary>
        /// Create expense document with discount and tax inline.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocument"></param>
        /// <returns>ApiResponse of ExpensenlineDocumentResponse</returns>
        ApiResponse<ExpensenlineDocumentResponse> ExpensesInlinePostWithHttpInfo (string authorization, ExpenseInlineDocument expenseInlineDocument);
        /// <summary>
        /// Create expense document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseDocument"></param>
        /// <returns>ExpenseDocumentResponse</returns>
        ExpenseDocumentResponse ExpensesPost (string authorization, ExpenseDocument expenseDocument);

        /// <summary>
        /// Create expense document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseDocument"></param>
        /// <returns>ApiResponse of ExpenseDocumentResponse</returns>
        ApiResponse<ExpenseDocumentResponse> ExpensesPostWithHttpInfo (string authorization, ExpenseDocument expenseDocument);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Accounting categorys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of BusinessCategory</returns>
        System.Threading.Tasks.Task<BusinessCategory> ExpensesCategoriesAccountingGetAsync (string authorization);

        /// <summary>
        /// Accounting categorys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of ApiResponse (BusinessCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessCategory>> ExpensesCategoriesAccountingGetAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// Business categorys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of BusinessCategory</returns>
        System.Threading.Tasks.Task<BusinessCategory> ExpensesCategoriesBusinessGetAsync (string authorization);

        /// <summary>
        /// Business categorys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of ApiResponse (BusinessCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessCategory>> ExpensesCategoriesBusinessGetAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// List expense documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of ExpenseDocumentResponse</returns>
        System.Threading.Tasks.Task<ExpenseDocumentResponse> ExpensesGetAsync (string authorization);

        /// <summary>
        /// List expense documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of ApiResponse (ExpenseDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseDocumentResponse>> ExpensesGetAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// Add Attachment to expense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExpensesIdAttachmentPostAsync (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// Add Attachment to expense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExpensesIdAttachmentPostAsyncWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// Get expense document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>Task of ExpenseDocumentResponse</returns>
        System.Threading.Tasks.Task<ExpenseDocumentResponse> ExpensesIdGetAsync (string authorization, string id);

        /// <summary>
        /// Get expense document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ExpenseDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseDocumentResponse>> ExpensesIdGetAsyncWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Get expense document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>Task of ExpenseInlineDocument</returns>
        System.Threading.Tasks.Task<ExpenseInlineDocument> ExpensesIdInlineGetAsync (string authorization, string id);

        /// <summary>
        /// Get expense document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ExpenseInlineDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseInlineDocument>> ExpensesIdInlineGetAsyncWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Create expense document with discount and tax inline.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocument"></param>
        /// <returns>Task of ExpensenlineDocumentResponse</returns>
        System.Threading.Tasks.Task<ExpensenlineDocumentResponse> ExpensesInlinePostAsync (string authorization, ExpenseInlineDocument expenseInlineDocument);

        /// <summary>
        /// Create expense document with discount and tax inline.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocument"></param>
        /// <returns>Task of ApiResponse (ExpensenlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpensenlineDocumentResponse>> ExpensesInlinePostAsyncWithHttpInfo (string authorization, ExpenseInlineDocument expenseInlineDocument);
        /// <summary>
        /// Create expense document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseDocument"></param>
        /// <returns>Task of ExpenseDocumentResponse</returns>
        System.Threading.Tasks.Task<ExpenseDocumentResponse> ExpensesPostAsync (string authorization, ExpenseDocument expenseDocument);

        /// <summary>
        /// Create expense document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseDocument"></param>
        /// <returns>Task of ApiResponse (ExpenseDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseDocumentResponse>> ExpensesPostAsyncWithHttpInfo (string authorization, ExpenseDocument expenseDocument);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExpenseApi : IExpenseApi
    {
        private Flowaccount.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExpenseApi(String basePath)
        {
            this.Configuration = new Flowaccount.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseApi"/> class
        /// </summary>
        /// <returns></returns>
        public ExpenseApi()
        {
            this.Configuration = Flowaccount.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExpenseApi(Flowaccount.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flowaccount.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flowaccount.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flowaccount.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Accounting categorys 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>BusinessCategory</returns>
        public BusinessCategory ExpensesCategoriesAccountingGet (string authorization)
        {
             ApiResponse<BusinessCategory> localVarResponse = ExpensesCategoriesAccountingGetWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accounting categorys 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of BusinessCategory</returns>
        public ApiResponse<BusinessCategory> ExpensesCategoriesAccountingGetWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpenseApi->ExpensesCategoriesAccountingGet");

            var localVarPath = "/expenses/categories/accounting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesCategoriesAccountingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessCategory)));
        }

        /// <summary>
        /// Accounting categorys 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of BusinessCategory</returns>
        public async System.Threading.Tasks.Task<BusinessCategory> ExpensesCategoriesAccountingGetAsync (string authorization)
        {
             ApiResponse<BusinessCategory> localVarResponse = await ExpensesCategoriesAccountingGetAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accounting categorys 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of ApiResponse (BusinessCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessCategory>> ExpensesCategoriesAccountingGetAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpenseApi->ExpensesCategoriesAccountingGet");

            var localVarPath = "/expenses/categories/accounting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesCategoriesAccountingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessCategory)));
        }

        /// <summary>
        /// Business categorys 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>BusinessCategory</returns>
        public BusinessCategory ExpensesCategoriesBusinessGet (string authorization)
        {
             ApiResponse<BusinessCategory> localVarResponse = ExpensesCategoriesBusinessGetWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Business categorys 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of BusinessCategory</returns>
        public ApiResponse<BusinessCategory> ExpensesCategoriesBusinessGetWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpenseApi->ExpensesCategoriesBusinessGet");

            var localVarPath = "/expenses/categories/business";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesCategoriesBusinessGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessCategory)));
        }

        /// <summary>
        /// Business categorys 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of BusinessCategory</returns>
        public async System.Threading.Tasks.Task<BusinessCategory> ExpensesCategoriesBusinessGetAsync (string authorization)
        {
             ApiResponse<BusinessCategory> localVarResponse = await ExpensesCategoriesBusinessGetAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Business categorys 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of ApiResponse (BusinessCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessCategory>> ExpensesCategoriesBusinessGetAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpenseApi->ExpensesCategoriesBusinessGet");

            var localVarPath = "/expenses/categories/business";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesCategoriesBusinessGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessCategory)));
        }

        /// <summary>
        /// List expense documents. 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ExpenseDocumentResponse</returns>
        public ExpenseDocumentResponse ExpensesGet (string authorization)
        {
             ApiResponse<ExpenseDocumentResponse> localVarResponse = ExpensesGetWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List expense documents. 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of ExpenseDocumentResponse</returns>
        public ApiResponse<ExpenseDocumentResponse> ExpensesGetWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpenseApi->ExpensesGet");

            var localVarPath = "/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseDocumentResponse)));
        }

        /// <summary>
        /// List expense documents. 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of ExpenseDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ExpenseDocumentResponse> ExpensesGetAsync (string authorization)
        {
             ApiResponse<ExpenseDocumentResponse> localVarResponse = await ExpensesGetAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List expense documents. 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of ApiResponse (ExpenseDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExpenseDocumentResponse>> ExpensesGetAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpenseApi->ExpensesGet");

            var localVarPath = "/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseDocumentResponse)));
        }

        /// <summary>
        /// Add Attachment to expense 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns></returns>
        public void ExpensesIdAttachmentPost (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
             ExpensesIdAttachmentPostWithHttpInfo(authorization, id, file);
        }

        /// <summary>
        /// Add Attachment to expense 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExpensesIdAttachmentPostWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpenseApi->ExpensesIdAttachmentPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpenseApi->ExpensesIdAttachmentPost");

            var localVarPath = "/expenses/{id}/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdAttachmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add Attachment to expense 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExpensesIdAttachmentPostAsync (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
             await ExpensesIdAttachmentPostAsyncWithHttpInfo(authorization, id, file);

        }

        /// <summary>
        /// Add Attachment to expense 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExpensesIdAttachmentPostAsyncWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpenseApi->ExpensesIdAttachmentPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpenseApi->ExpensesIdAttachmentPost");

            var localVarPath = "/expenses/{id}/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdAttachmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get expense document 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>ExpenseDocumentResponse</returns>
        public ExpenseDocumentResponse ExpensesIdGet (string authorization, string id)
        {
             ApiResponse<ExpenseDocumentResponse> localVarResponse = ExpensesIdGetWithHttpInfo(authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get expense document 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ExpenseDocumentResponse</returns>
        public ApiResponse<ExpenseDocumentResponse> ExpensesIdGetWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpenseApi->ExpensesIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpenseApi->ExpensesIdGet");

            var localVarPath = "/expenses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseDocumentResponse)));
        }

        /// <summary>
        /// Get expense document 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>Task of ExpenseDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ExpenseDocumentResponse> ExpensesIdGetAsync (string authorization, string id)
        {
             ApiResponse<ExpenseDocumentResponse> localVarResponse = await ExpensesIdGetAsyncWithHttpInfo(authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get expense document 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ExpenseDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExpenseDocumentResponse>> ExpensesIdGetAsyncWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpenseApi->ExpensesIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpenseApi->ExpensesIdGet");

            var localVarPath = "/expenses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseDocumentResponse)));
        }

        /// <summary>
        /// Get expense document 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>ExpenseInlineDocument</returns>
        public ExpenseInlineDocument ExpensesIdInlineGet (string authorization, string id)
        {
             ApiResponse<ExpenseInlineDocument> localVarResponse = ExpensesIdInlineGetWithHttpInfo(authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get expense document 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ExpenseInlineDocument</returns>
        public ApiResponse<ExpenseInlineDocument> ExpensesIdInlineGetWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpenseApi->ExpensesIdInlineGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpenseApi->ExpensesIdInlineGet");

            var localVarPath = "/expenses/{id}/inline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdInlineGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseInlineDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseInlineDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseInlineDocument)));
        }

        /// <summary>
        /// Get expense document 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>Task of ExpenseInlineDocument</returns>
        public async System.Threading.Tasks.Task<ExpenseInlineDocument> ExpensesIdInlineGetAsync (string authorization, string id)
        {
             ApiResponse<ExpenseInlineDocument> localVarResponse = await ExpensesIdInlineGetAsyncWithHttpInfo(authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get expense document 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ExpenseInlineDocument)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExpenseInlineDocument>> ExpensesIdInlineGetAsyncWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpenseApi->ExpensesIdInlineGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpenseApi->ExpensesIdInlineGet");

            var localVarPath = "/expenses/{id}/inline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdInlineGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseInlineDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseInlineDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseInlineDocument)));
        }

        /// <summary>
        /// Create expense document with discount and tax inline. 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocument"></param>
        /// <returns>ExpensenlineDocumentResponse</returns>
        public ExpensenlineDocumentResponse ExpensesInlinePost (string authorization, ExpenseInlineDocument expenseInlineDocument)
        {
             ApiResponse<ExpensenlineDocumentResponse> localVarResponse = ExpensesInlinePostWithHttpInfo(authorization, expenseInlineDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create expense document with discount and tax inline. 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocument"></param>
        /// <returns>ApiResponse of ExpensenlineDocumentResponse</returns>
        public ApiResponse<ExpensenlineDocumentResponse> ExpensesInlinePostWithHttpInfo (string authorization, ExpenseInlineDocument expenseInlineDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpenseApi->ExpensesInlinePost");
            // verify the required parameter 'expenseInlineDocument' is set
            if (expenseInlineDocument == null)
                throw new ApiException(400, "Missing required parameter 'expenseInlineDocument' when calling ExpenseApi->ExpensesInlinePost");

            var localVarPath = "/expenses/inline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (expenseInlineDocument != null && expenseInlineDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(expenseInlineDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expenseInlineDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesInlinePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpensenlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpensenlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpensenlineDocumentResponse)));
        }

        /// <summary>
        /// Create expense document with discount and tax inline. 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocument"></param>
        /// <returns>Task of ExpensenlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ExpensenlineDocumentResponse> ExpensesInlinePostAsync (string authorization, ExpenseInlineDocument expenseInlineDocument)
        {
             ApiResponse<ExpensenlineDocumentResponse> localVarResponse = await ExpensesInlinePostAsyncWithHttpInfo(authorization, expenseInlineDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create expense document with discount and tax inline. 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocument"></param>
        /// <returns>Task of ApiResponse (ExpensenlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExpensenlineDocumentResponse>> ExpensesInlinePostAsyncWithHttpInfo (string authorization, ExpenseInlineDocument expenseInlineDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpenseApi->ExpensesInlinePost");
            // verify the required parameter 'expenseInlineDocument' is set
            if (expenseInlineDocument == null)
                throw new ApiException(400, "Missing required parameter 'expenseInlineDocument' when calling ExpenseApi->ExpensesInlinePost");

            var localVarPath = "/expenses/inline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (expenseInlineDocument != null && expenseInlineDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(expenseInlineDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expenseInlineDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesInlinePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpensenlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpensenlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpensenlineDocumentResponse)));
        }

        /// <summary>
        /// Create expense document. 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseDocument"></param>
        /// <returns>ExpenseDocumentResponse</returns>
        public ExpenseDocumentResponse ExpensesPost (string authorization, ExpenseDocument expenseDocument)
        {
             ApiResponse<ExpenseDocumentResponse> localVarResponse = ExpensesPostWithHttpInfo(authorization, expenseDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create expense document. 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseDocument"></param>
        /// <returns>ApiResponse of ExpenseDocumentResponse</returns>
        public ApiResponse<ExpenseDocumentResponse> ExpensesPostWithHttpInfo (string authorization, ExpenseDocument expenseDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpenseApi->ExpensesPost");
            // verify the required parameter 'expenseDocument' is set
            if (expenseDocument == null)
                throw new ApiException(400, "Missing required parameter 'expenseDocument' when calling ExpenseApi->ExpensesPost");

            var localVarPath = "/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (expenseDocument != null && expenseDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(expenseDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expenseDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseDocumentResponse)));
        }

        /// <summary>
        /// Create expense document. 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseDocument"></param>
        /// <returns>Task of ExpenseDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ExpenseDocumentResponse> ExpensesPostAsync (string authorization, ExpenseDocument expenseDocument)
        {
             ApiResponse<ExpenseDocumentResponse> localVarResponse = await ExpensesPostAsyncWithHttpInfo(authorization, expenseDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create expense document. 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseDocument"></param>
        /// <returns>Task of ApiResponse (ExpenseDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExpenseDocumentResponse>> ExpensesPostAsyncWithHttpInfo (string authorization, ExpenseDocument expenseDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpenseApi->ExpensesPost");
            // verify the required parameter 'expenseDocument' is set
            if (expenseDocument == null)
                throw new ApiException(400, "Missing required parameter 'expenseDocument' when calling ExpenseApi->ExpensesPost");

            var localVarPath = "/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (expenseDocument != null && expenseDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(expenseDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expenseDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseDocumentResponse)));
        }

    }
}
