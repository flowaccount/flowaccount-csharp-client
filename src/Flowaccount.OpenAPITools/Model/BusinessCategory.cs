/* 
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2-oas3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Flowaccount.OpenAPITools.Client.OpenAPIDateConverter;

namespace Flowaccount.OpenAPITools.Model
{
    /// <summary>
    /// BusinessCategory
    /// </summary>
    [DataContract]
    public partial class BusinessCategory :  IEquatable<BusinessCategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessCategory" /> class.
        /// </summary>
        /// <param name="id">id of category.</param>
        /// <param name="systemCode">system code.</param>
        /// <param name="categoryId">id of business category.</param>
        /// <param name="categoryNameLocal">name local of category.</param>
        /// <param name="categoryNameForeign">name foreign of category.</param>
        /// <param name="debitId">id of debit.</param>
        /// <param name="debitCategory">id of debit category.</param>
        /// <param name="debitCode">code of debit category.</param>
        /// <param name="debitNameLocal">name local of debit.</param>
        /// <param name="debitNameForeign">name foreign of debit.</param>
        /// <param name="creditId">id of credit.</param>
        /// <param name="creditCategory">id of credit category.</param>
        /// <param name="creditCode">code of credit category.</param>
        /// <param name="creditNameLocal">name local of credit.</param>
        /// <param name="creditNameForeign">name foreign of credit.</param>
        /// <param name="keywords">keyword.</param>
        public BusinessCategory(int id = default(int), int systemCode = default(int), int categoryId = default(int), string categoryNameLocal = default(string), string categoryNameForeign = default(string), int debitId = default(int), int debitCategory = default(int), string debitCode = default(string), string debitNameLocal = default(string), string debitNameForeign = default(string), int creditId = default(int), int creditCategory = default(int), string creditCode = default(string), string creditNameLocal = default(string), string creditNameForeign = default(string), string keywords = default(string))
        {
            this.Id = id;
            this.SystemCode = systemCode;
            this.CategoryId = categoryId;
            this.CategoryNameLocal = categoryNameLocal;
            this.CategoryNameForeign = categoryNameForeign;
            this.DebitId = debitId;
            this.DebitCategory = debitCategory;
            this.DebitCode = debitCode;
            this.DebitNameLocal = debitNameLocal;
            this.DebitNameForeign = debitNameForeign;
            this.CreditId = creditId;
            this.CreditCategory = creditCategory;
            this.CreditCode = creditCode;
            this.CreditNameLocal = creditNameLocal;
            this.CreditNameForeign = creditNameForeign;
            this.Keywords = keywords;
        }
        
        /// <summary>
        /// id of category
        /// </summary>
        /// <value>id of category</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// system code
        /// </summary>
        /// <value>system code</value>
        [DataMember(Name="systemCode", EmitDefaultValue=true)]
        public int SystemCode { get; set; }

        /// <summary>
        /// id of business category
        /// </summary>
        /// <value>id of business category</value>
        [DataMember(Name="categoryId", EmitDefaultValue=true)]
        public int CategoryId { get; set; }

        /// <summary>
        /// name local of category
        /// </summary>
        /// <value>name local of category</value>
        [DataMember(Name="categoryNameLocal", EmitDefaultValue=true)]
        public string CategoryNameLocal { get; set; }

        /// <summary>
        /// name foreign of category
        /// </summary>
        /// <value>name foreign of category</value>
        [DataMember(Name="categoryNameForeign", EmitDefaultValue=true)]
        public string CategoryNameForeign { get; set; }

        /// <summary>
        /// id of debit
        /// </summary>
        /// <value>id of debit</value>
        [DataMember(Name="debitId", EmitDefaultValue=true)]
        public int DebitId { get; set; }

        /// <summary>
        /// id of debit category
        /// </summary>
        /// <value>id of debit category</value>
        [DataMember(Name="debitCategory", EmitDefaultValue=true)]
        public int DebitCategory { get; set; }

        /// <summary>
        /// code of debit category
        /// </summary>
        /// <value>code of debit category</value>
        [DataMember(Name="debitCode", EmitDefaultValue=true)]
        public string DebitCode { get; set; }

        /// <summary>
        /// name local of debit
        /// </summary>
        /// <value>name local of debit</value>
        [DataMember(Name="debitNameLocal", EmitDefaultValue=true)]
        public string DebitNameLocal { get; set; }

        /// <summary>
        /// name foreign of debit
        /// </summary>
        /// <value>name foreign of debit</value>
        [DataMember(Name="debitNameForeign", EmitDefaultValue=true)]
        public string DebitNameForeign { get; set; }

        /// <summary>
        /// id of credit
        /// </summary>
        /// <value>id of credit</value>
        [DataMember(Name="creditId", EmitDefaultValue=true)]
        public int CreditId { get; set; }

        /// <summary>
        /// id of credit category
        /// </summary>
        /// <value>id of credit category</value>
        [DataMember(Name="creditCategory", EmitDefaultValue=true)]
        public int CreditCategory { get; set; }

        /// <summary>
        /// code of credit category
        /// </summary>
        /// <value>code of credit category</value>
        [DataMember(Name="creditCode", EmitDefaultValue=true)]
        public string CreditCode { get; set; }

        /// <summary>
        /// name local of credit
        /// </summary>
        /// <value>name local of credit</value>
        [DataMember(Name="creditNameLocal", EmitDefaultValue=true)]
        public string CreditNameLocal { get; set; }

        /// <summary>
        /// name foreign of credit
        /// </summary>
        /// <value>name foreign of credit</value>
        [DataMember(Name="creditNameForeign", EmitDefaultValue=true)]
        public string CreditNameForeign { get; set; }

        /// <summary>
        /// keyword
        /// </summary>
        /// <value>keyword</value>
        [DataMember(Name="keywords", EmitDefaultValue=true)]
        public string Keywords { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BusinessCategory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SystemCode: ").Append(SystemCode).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryNameLocal: ").Append(CategoryNameLocal).Append("\n");
            sb.Append("  CategoryNameForeign: ").Append(CategoryNameForeign).Append("\n");
            sb.Append("  DebitId: ").Append(DebitId).Append("\n");
            sb.Append("  DebitCategory: ").Append(DebitCategory).Append("\n");
            sb.Append("  DebitCode: ").Append(DebitCode).Append("\n");
            sb.Append("  DebitNameLocal: ").Append(DebitNameLocal).Append("\n");
            sb.Append("  DebitNameForeign: ").Append(DebitNameForeign).Append("\n");
            sb.Append("  CreditId: ").Append(CreditId).Append("\n");
            sb.Append("  CreditCategory: ").Append(CreditCategory).Append("\n");
            sb.Append("  CreditCode: ").Append(CreditCode).Append("\n");
            sb.Append("  CreditNameLocal: ").Append(CreditNameLocal).Append("\n");
            sb.Append("  CreditNameForeign: ").Append(CreditNameForeign).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BusinessCategory);
        }

        /// <summary>
        /// Returns true if BusinessCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of BusinessCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BusinessCategory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SystemCode == input.SystemCode ||
                    (this.SystemCode != null &&
                    this.SystemCode.Equals(input.SystemCode))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.CategoryNameLocal == input.CategoryNameLocal ||
                    (this.CategoryNameLocal != null &&
                    this.CategoryNameLocal.Equals(input.CategoryNameLocal))
                ) && 
                (
                    this.CategoryNameForeign == input.CategoryNameForeign ||
                    (this.CategoryNameForeign != null &&
                    this.CategoryNameForeign.Equals(input.CategoryNameForeign))
                ) && 
                (
                    this.DebitId == input.DebitId ||
                    (this.DebitId != null &&
                    this.DebitId.Equals(input.DebitId))
                ) && 
                (
                    this.DebitCategory == input.DebitCategory ||
                    (this.DebitCategory != null &&
                    this.DebitCategory.Equals(input.DebitCategory))
                ) && 
                (
                    this.DebitCode == input.DebitCode ||
                    (this.DebitCode != null &&
                    this.DebitCode.Equals(input.DebitCode))
                ) && 
                (
                    this.DebitNameLocal == input.DebitNameLocal ||
                    (this.DebitNameLocal != null &&
                    this.DebitNameLocal.Equals(input.DebitNameLocal))
                ) && 
                (
                    this.DebitNameForeign == input.DebitNameForeign ||
                    (this.DebitNameForeign != null &&
                    this.DebitNameForeign.Equals(input.DebitNameForeign))
                ) && 
                (
                    this.CreditId == input.CreditId ||
                    (this.CreditId != null &&
                    this.CreditId.Equals(input.CreditId))
                ) && 
                (
                    this.CreditCategory == input.CreditCategory ||
                    (this.CreditCategory != null &&
                    this.CreditCategory.Equals(input.CreditCategory))
                ) && 
                (
                    this.CreditCode == input.CreditCode ||
                    (this.CreditCode != null &&
                    this.CreditCode.Equals(input.CreditCode))
                ) && 
                (
                    this.CreditNameLocal == input.CreditNameLocal ||
                    (this.CreditNameLocal != null &&
                    this.CreditNameLocal.Equals(input.CreditNameLocal))
                ) && 
                (
                    this.CreditNameForeign == input.CreditNameForeign ||
                    (this.CreditNameForeign != null &&
                    this.CreditNameForeign.Equals(input.CreditNameForeign))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    (this.Keywords != null &&
                    this.Keywords.Equals(input.Keywords))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SystemCode != null)
                    hashCode = hashCode * 59 + this.SystemCode.GetHashCode();
                if (this.CategoryId != null)
                    hashCode = hashCode * 59 + this.CategoryId.GetHashCode();
                if (this.CategoryNameLocal != null)
                    hashCode = hashCode * 59 + this.CategoryNameLocal.GetHashCode();
                if (this.CategoryNameForeign != null)
                    hashCode = hashCode * 59 + this.CategoryNameForeign.GetHashCode();
                if (this.DebitId != null)
                    hashCode = hashCode * 59 + this.DebitId.GetHashCode();
                if (this.DebitCategory != null)
                    hashCode = hashCode * 59 + this.DebitCategory.GetHashCode();
                if (this.DebitCode != null)
                    hashCode = hashCode * 59 + this.DebitCode.GetHashCode();
                if (this.DebitNameLocal != null)
                    hashCode = hashCode * 59 + this.DebitNameLocal.GetHashCode();
                if (this.DebitNameForeign != null)
                    hashCode = hashCode * 59 + this.DebitNameForeign.GetHashCode();
                if (this.CreditId != null)
                    hashCode = hashCode * 59 + this.CreditId.GetHashCode();
                if (this.CreditCategory != null)
                    hashCode = hashCode * 59 + this.CreditCategory.GetHashCode();
                if (this.CreditCode != null)
                    hashCode = hashCode * 59 + this.CreditCode.GetHashCode();
                if (this.CreditNameLocal != null)
                    hashCode = hashCode * 59 + this.CreditNameLocal.GetHashCode();
                if (this.CreditNameForeign != null)
                    hashCode = hashCode * 59 + this.CreditNameForeign.GetHashCode();
                if (this.Keywords != null)
                    hashCode = hashCode * 59 + this.Keywords.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
