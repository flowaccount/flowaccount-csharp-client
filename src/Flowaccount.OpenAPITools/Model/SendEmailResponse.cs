/* 
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2-oas3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Flowaccount.OpenAPITools.Client.OpenAPIDateConverter;

namespace Flowaccount.OpenAPITools.Model
{
    /// <summary>
    /// SendEmailResponse
    /// </summary>
    [DataContract]
    public partial class SendEmailResponse :  IEquatable<SendEmailResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendEmailResponse" /> class.
        /// </summary>
        /// <param name="message">Email sent successfully.</param>
        /// <param name="ok">Status.</param>
        /// <param name="successMsg">Change Status Complete.</param>
        public SendEmailResponse(string message = default(string), bool ok = default(bool), string successMsg = default(string))
        {
            this.Message = message;
            this.Ok = ok;
            this.SuccessMsg = successMsg;
        }
        
        /// <summary>
        /// Email sent successfully
        /// </summary>
        /// <value>Email sent successfully</value>
        [DataMember(Name="message", EmitDefaultValue=true)]
        public string Message { get; set; }

        /// <summary>
        /// Status
        /// </summary>
        /// <value>Status</value>
        [DataMember(Name="ok", EmitDefaultValue=true)]
        public bool Ok { get; set; }

        /// <summary>
        /// Change Status Complete
        /// </summary>
        /// <value>Change Status Complete</value>
        [DataMember(Name="successMsg", EmitDefaultValue=true)]
        public string SuccessMsg { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendEmailResponse {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Ok: ").Append(Ok).Append("\n");
            sb.Append("  SuccessMsg: ").Append(SuccessMsg).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendEmailResponse);
        }

        /// <summary>
        /// Returns true if SendEmailResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SendEmailResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendEmailResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Ok == input.Ok ||
                    (this.Ok != null &&
                    this.Ok.Equals(input.Ok))
                ) && 
                (
                    this.SuccessMsg == input.SuccessMsg ||
                    (this.SuccessMsg != null &&
                    this.SuccessMsg.Equals(input.SuccessMsg))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Ok != null)
                    hashCode = hashCode * 59 + this.Ok.GetHashCode();
                if (this.SuccessMsg != null)
                    hashCode = hashCode * 59 + this.SuccessMsg.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
