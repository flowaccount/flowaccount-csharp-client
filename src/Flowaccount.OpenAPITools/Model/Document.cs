/* 
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2-oas3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Flowaccount.OpenAPITools.Client.OpenAPIDateConverter;

namespace Flowaccount.OpenAPITools.Model
{
    /// <summary>
    /// Document
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "DocumentStructureType")]
    [JsonSubtypes.KnownSubType(typeof(SimpleDocument), "SimpleDocument")]
    [JsonSubtypes.KnownSubType(typeof(InlineDocument), "InlineDocument")]
    public partial class Document :  IEquatable<Document>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Document" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Document() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Document" /> class.
        /// </summary>
        /// <param name="recordId">id ของเอกสาร (default to 0).</param>
        /// <param name="documentSerial">เลขที่เอกสาร.</param>
        /// <param name="contactCode">รหัส ผู้ติดต่อ/ผู้จำหน่าย.</param>
        /// <param name="contactName">ชื่อบริษัท (required).</param>
        /// <param name="contactAddress">ที่อยู่ ผู้ติดต่อ/ผู้จำหน่าย.</param>
        /// <param name="contactTaxId">เลขประจำตัวผู้เสียภาษี ผู้ติิดต่อ/ผู้จำหน่าย.</param>
        /// <param name="contactBranch">สำนักงาน/สาขา.</param>
        /// <param name="contactPerson">ชื่อผู้ติดต่อ.</param>
        /// <param name="contactEmail">อีเมลผู้ติดต่อ.</param>
        /// <param name="contactNumber">เบอร์มือถือผู้ติดต่อ.</param>
        /// <param name="contactZipCode">รหัสไปรษณีย์ติดต่อ.</param>
        /// <param name="contactGroup">ประผู้ติดต่อ 1 &#x3D; บุคคลธรรมดา / 3 &#x3D; นิติบุคคล (default to 1).</param>
        /// <param name="publishedOn">วันที่เอกสาร รูปแบบ yyyy-MM-dd (required).</param>
        /// <param name="creditType">รูปแบบเครดิต: 1 &#x3D; เครดิต (วัน) / 3 &#x3D; เงินสด  / 5 &#x3D; เครดิต (ไม่แสดงวันที่ครบกำหนด) (default to 1).</param>
        /// <param name="creditDays">จำนวนวันที่ให้เครดิต (default to 0).</param>
        /// <param name="dueDate">วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd (required).</param>
        /// <param name="salesName">ชื่อผู้สร้างเอกสาร หรือ ชื่อพนักงานขาย (default to &quot;email creator&quot;).</param>
        /// <param name="projectName">ชื่อโปรเจค.</param>
        /// <param name="reference">เลขที่อ้างอิง หรือ เลขที่เอกสารที่เกี่ยวข้อง.</param>
        /// <param name="isVatInclusive">มูลค่าเอกสารรวมภาษีแล้วหรือไม่ (default to false).</param>
        /// <param name="discountType">รูปแบบส่วนลด 1 &#x3D;  เปอร์เซ็นต์ / 3 &#x3D; จำนวน (บาท) (default to 1).</param>
        /// <param name="discountPercentage">มูลค่าส่วนลดเป็นเปอร์เซ็นต์ (default to 0).</param>
        /// <param name="discountAmount">มูลค่าส่วนลดเป็นจำนวน (default to 0M).</param>
        /// <param name="subTotal">มูลค่ารวมเป็นเงิน (default to 0M).</param>
        /// <param name="totalAfterDiscount">มูลค่าหลังหักส่วนลด (required).</param>
        /// <param name="grandTotal">มูลค่าท้ายเอกสาร (รวม vat เสมอ) (required).</param>
        /// <param name="totalWithoutVat">มูลค่าเอกสารก่อนภาษี.</param>
        /// <param name="vatAmount">ภาษีมูลค่าเพิ่ม.</param>
        /// <param name="documentShowWithholdingTax">แสดงหรือไแสดง หักณที่จ่ายท้ายบิล (default to false).</param>
        /// <param name="documentWithholdingTaxPercentage">ภาษี ณ ที่จ่าย (%) (default to 0).</param>
        /// <param name="documentWithholdingTaxAmount">มูลค่าภาษีหักณที่จ่าย.</param>
        /// <param name="remarks">remarks.</param>
        /// <param name="internalNotes">โน๊ตภายในบริษัท.</param>
        /// <param name="showSignatureOrStamp">ลายเซ็นอิเล็กทรอนิกส์และตรายาง (default to true).</param>
        /// <param name="paymentMethod">วิธีการชำระ 1 &#x3D; เงินสด / 3 &#x3D; เช็ค /  5 &#x3D; โอนเงิน , 7 &#x3D; เครดิต (default to 0).</param>
        /// <param name="paymentDate">วันที่รับชำระเงิน รูปแบบ yyyy-MM-dd.</param>
        /// <param name="paymentRemarks">รายละเอียดการเก็บเงิน.</param>
        /// <param name="bankAccountName">ชื่อธนาคาร.</param>
        /// <param name="bankAccountNumber">เลขที่ธนาคาร/บัตรเคดิต(สำหรับ MethodPayment : 5, 7).</param>
        /// <param name="collected">จำนวนเงินที่เก็บ.</param>
        /// <param name="withheldAmount">ยอดหัก ณ ที่จ่าย.</param>
        /// <param name="withheldPercentage">หัก ณ ที่จ่าย.</param>
        /// <param name="fee">ค่าธรรมเนียม.</param>
        /// <param name="documentStructureType">documentStructureType (required).</param>
        public Document(long recordId = 0, string documentSerial = default(string), string contactCode = default(string), string contactName = default(string), string contactAddress = default(string), string contactTaxId = default(string), string contactBranch = default(string), string contactPerson = default(string), string contactEmail = default(string), string contactNumber = default(string), string contactZipCode = default(string), int contactGroup = 1, DateTime publishedOn = default(DateTime), int creditType = 1, int creditDays = 0, DateTime dueDate = default(DateTime), string salesName = "email creator", string projectName = default(string), string reference = default(string), bool isVatInclusive = false, int discountType = 1, int discountPercentage = 0, decimal discountAmount = 0M, decimal subTotal = 0M, decimal totalAfterDiscount = default(decimal), decimal grandTotal = default(decimal), decimal totalWithoutVat = default(decimal), decimal vatAmount = default(decimal), bool documentShowWithholdingTax = false, int documentWithholdingTaxPercentage = 0, decimal documentWithholdingTaxAmount = default(decimal), string remarks = default(string), string internalNotes = default(string), bool showSignatureOrStamp = true, int paymentMethod = 0, DateTime paymentDate = default(DateTime), string paymentRemarks = default(string), string bankAccountName = default(string), string bankAccountNumber = default(string), decimal collected = default(decimal), decimal withheldAmount = default(decimal), int withheldPercentage = default(int), decimal fee = default(decimal), string documentStructureType = default(string))
        {
            // to ensure "contactName" is required (not null)
            if (contactName == null)
            {
                throw new InvalidDataException("contactName is a required property for Document and cannot be null");
            }
            else
            {
                this.ContactName = contactName;
            }
            
            // to ensure "publishedOn" is required (not null)
            if (publishedOn == null)
            {
                throw new InvalidDataException("publishedOn is a required property for Document and cannot be null");
            }
            else
            {
                this.PublishedOn = publishedOn;
            }
            
            // to ensure "dueDate" is required (not null)
            if (dueDate == null)
            {
                throw new InvalidDataException("dueDate is a required property for Document and cannot be null");
            }
            else
            {
                this.DueDate = dueDate;
            }
            
            // to ensure "totalAfterDiscount" is required (not null)
            if (totalAfterDiscount == null)
            {
                throw new InvalidDataException("totalAfterDiscount is a required property for Document and cannot be null");
            }
            else
            {
                this.TotalAfterDiscount = totalAfterDiscount;
            }
            
            // to ensure "grandTotal" is required (not null)
            if (grandTotal == null)
            {
                throw new InvalidDataException("grandTotal is a required property for Document and cannot be null");
            }
            else
            {
                this.GrandTotal = grandTotal;
            }
            
            // to ensure "documentStructureType" is required (not null)
            if (documentStructureType == null)
            {
                throw new InvalidDataException("documentStructureType is a required property for Document and cannot be null");
            }
            else
            {
                this.DocumentStructureType = documentStructureType;
            }
            
            this.DocumentStructureType = documentStructureType;
            // use default value if no "recordId" provided
            if (recordId == null)
            {
                this.RecordId = 0;
            }
            else
            {
                this.RecordId = recordId;
            }
            this.DocumentSerial = documentSerial;
            this.ContactCode = contactCode;
            this.ContactAddress = contactAddress;
            this.ContactTaxId = contactTaxId;
            this.ContactBranch = contactBranch;
            this.ContactPerson = contactPerson;
            this.ContactEmail = contactEmail;
            this.ContactNumber = contactNumber;
            this.ContactZipCode = contactZipCode;
            // use default value if no "contactGroup" provided
            if (contactGroup == null)
            {
                this.ContactGroup = 1;
            }
            else
            {
                this.ContactGroup = contactGroup;
            }
            // use default value if no "creditType" provided
            if (creditType == null)
            {
                this.CreditType = 1;
            }
            else
            {
                this.CreditType = creditType;
            }
            // use default value if no "creditDays" provided
            if (creditDays == null)
            {
                this.CreditDays = 0;
            }
            else
            {
                this.CreditDays = creditDays;
            }
            // use default value if no "salesName" provided
            if (salesName == null)
            {
                this.SalesName = "email creator";
            }
            else
            {
                this.SalesName = salesName;
            }
            this.ProjectName = projectName;
            this.Reference = reference;
            // use default value if no "isVatInclusive" provided
            if (isVatInclusive == null)
            {
                this.IsVatInclusive = false;
            }
            else
            {
                this.IsVatInclusive = isVatInclusive;
            }
            // use default value if no "discountType" provided
            if (discountType == null)
            {
                this.DiscountType = 1;
            }
            else
            {
                this.DiscountType = discountType;
            }
            // use default value if no "discountPercentage" provided
            if (discountPercentage == null)
            {
                this.DiscountPercentage = 0;
            }
            else
            {
                this.DiscountPercentage = discountPercentage;
            }
            // use default value if no "discountAmount" provided
            if (discountAmount == null)
            {
                this.DiscountAmount = 0M;
            }
            else
            {
                this.DiscountAmount = discountAmount;
            }
            // use default value if no "subTotal" provided
            if (subTotal == null)
            {
                this.SubTotal = 0M;
            }
            else
            {
                this.SubTotal = subTotal;
            }
            this.TotalWithoutVat = totalWithoutVat;
            this.VatAmount = vatAmount;
            // use default value if no "documentShowWithholdingTax" provided
            if (documentShowWithholdingTax == null)
            {
                this.DocumentShowWithholdingTax = false;
            }
            else
            {
                this.DocumentShowWithholdingTax = documentShowWithholdingTax;
            }
            // use default value if no "documentWithholdingTaxPercentage" provided
            if (documentWithholdingTaxPercentage == null)
            {
                this.DocumentWithholdingTaxPercentage = 0;
            }
            else
            {
                this.DocumentWithholdingTaxPercentage = documentWithholdingTaxPercentage;
            }
            this.DocumentWithholdingTaxAmount = documentWithholdingTaxAmount;
            this.Remarks = remarks;
            this.InternalNotes = internalNotes;
            // use default value if no "showSignatureOrStamp" provided
            if (showSignatureOrStamp == null)
            {
                this.ShowSignatureOrStamp = true;
            }
            else
            {
                this.ShowSignatureOrStamp = showSignatureOrStamp;
            }
            // use default value if no "paymentMethod" provided
            if (paymentMethod == null)
            {
                this.PaymentMethod = 0;
            }
            else
            {
                this.PaymentMethod = paymentMethod;
            }
            this.PaymentDate = paymentDate;
            this.PaymentRemarks = paymentRemarks;
            this.BankAccountName = bankAccountName;
            this.BankAccountNumber = bankAccountNumber;
            this.Collected = collected;
            this.WithheldAmount = withheldAmount;
            this.WithheldPercentage = withheldPercentage;
            this.Fee = fee;
        }
        
        /// <summary>
        /// id ของเอกสาร
        /// </summary>
        /// <value>id ของเอกสาร</value>
        [DataMember(Name="recordId", EmitDefaultValue=true)]
        public long RecordId { get; set; }

        /// <summary>
        /// เลขที่เอกสาร
        /// </summary>
        /// <value>เลขที่เอกสาร</value>
        [DataMember(Name="documentSerial", EmitDefaultValue=true)]
        public string DocumentSerial { get; set; }

        /// <summary>
        /// รหัส ผู้ติดต่อ/ผู้จำหน่าย
        /// </summary>
        /// <value>รหัส ผู้ติดต่อ/ผู้จำหน่าย</value>
        [DataMember(Name="contactCode", EmitDefaultValue=true)]
        public string ContactCode { get; set; }

        /// <summary>
        /// ชื่อบริษัท
        /// </summary>
        /// <value>ชื่อบริษัท</value>
        [DataMember(Name="contactName", EmitDefaultValue=true)]
        public string ContactName { get; set; }

        /// <summary>
        /// ที่อยู่ ผู้ติดต่อ/ผู้จำหน่าย
        /// </summary>
        /// <value>ที่อยู่ ผู้ติดต่อ/ผู้จำหน่าย</value>
        [DataMember(Name="contactAddress", EmitDefaultValue=true)]
        public string ContactAddress { get; set; }

        /// <summary>
        /// เลขประจำตัวผู้เสียภาษี ผู้ติิดต่อ/ผู้จำหน่าย
        /// </summary>
        /// <value>เลขประจำตัวผู้เสียภาษี ผู้ติิดต่อ/ผู้จำหน่าย</value>
        [DataMember(Name="contactTaxId", EmitDefaultValue=true)]
        public string ContactTaxId { get; set; }

        /// <summary>
        /// สำนักงาน/สาขา
        /// </summary>
        /// <value>สำนักงาน/สาขา</value>
        [DataMember(Name="contactBranch", EmitDefaultValue=true)]
        public string ContactBranch { get; set; }

        /// <summary>
        /// ชื่อผู้ติดต่อ
        /// </summary>
        /// <value>ชื่อผู้ติดต่อ</value>
        [DataMember(Name="contactPerson", EmitDefaultValue=true)]
        public string ContactPerson { get; set; }

        /// <summary>
        /// อีเมลผู้ติดต่อ
        /// </summary>
        /// <value>อีเมลผู้ติดต่อ</value>
        [DataMember(Name="contactEmail", EmitDefaultValue=true)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// เบอร์มือถือผู้ติดต่อ
        /// </summary>
        /// <value>เบอร์มือถือผู้ติดต่อ</value>
        [DataMember(Name="contactNumber", EmitDefaultValue=true)]
        public string ContactNumber { get; set; }

        /// <summary>
        /// รหัสไปรษณีย์ติดต่อ
        /// </summary>
        /// <value>รหัสไปรษณีย์ติดต่อ</value>
        [DataMember(Name="contactZipCode", EmitDefaultValue=true)]
        public string ContactZipCode { get; set; }

        /// <summary>
        /// ประผู้ติดต่อ 1 &#x3D; บุคคลธรรมดา / 3 &#x3D; นิติบุคคล
        /// </summary>
        /// <value>ประผู้ติดต่อ 1 &#x3D; บุคคลธรรมดา / 3 &#x3D; นิติบุคคล</value>
        [DataMember(Name="contactGroup", EmitDefaultValue=true)]
        public int ContactGroup { get; set; }

        /// <summary>
        /// วันที่เอกสาร รูปแบบ yyyy-MM-dd
        /// </summary>
        /// <value>วันที่เอกสาร รูปแบบ yyyy-MM-dd</value>
        [DataMember(Name="publishedOn", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime PublishedOn { get; set; }

        /// <summary>
        /// รูปแบบเครดิต: 1 &#x3D; เครดิต (วัน) / 3 &#x3D; เงินสด  / 5 &#x3D; เครดิต (ไม่แสดงวันที่ครบกำหนด)
        /// </summary>
        /// <value>รูปแบบเครดิต: 1 &#x3D; เครดิต (วัน) / 3 &#x3D; เงินสด  / 5 &#x3D; เครดิต (ไม่แสดงวันที่ครบกำหนด)</value>
        [DataMember(Name="creditType", EmitDefaultValue=true)]
        public int CreditType { get; set; }

        /// <summary>
        /// จำนวนวันที่ให้เครดิต
        /// </summary>
        /// <value>จำนวนวันที่ให้เครดิต</value>
        [DataMember(Name="creditDays", EmitDefaultValue=true)]
        public int CreditDays { get; set; }

        /// <summary>
        /// วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd
        /// </summary>
        /// <value>วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd</value>
        [DataMember(Name="dueDate", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DueDate { get; set; }

        /// <summary>
        /// ชื่อผู้สร้างเอกสาร หรือ ชื่อพนักงานขาย
        /// </summary>
        /// <value>ชื่อผู้สร้างเอกสาร หรือ ชื่อพนักงานขาย</value>
        [DataMember(Name="salesName", EmitDefaultValue=true)]
        public string SalesName { get; set; }

        /// <summary>
        /// ชื่อโปรเจค
        /// </summary>
        /// <value>ชื่อโปรเจค</value>
        [DataMember(Name="projectName", EmitDefaultValue=true)]
        public string ProjectName { get; set; }

        /// <summary>
        /// เลขที่อ้างอิง หรือ เลขที่เอกสารที่เกี่ยวข้อง
        /// </summary>
        /// <value>เลขที่อ้างอิง หรือ เลขที่เอกสารที่เกี่ยวข้อง</value>
        [DataMember(Name="reference", EmitDefaultValue=true)]
        public string Reference { get; set; }

        /// <summary>
        /// มูลค่าเอกสารรวมภาษีแล้วหรือไม่
        /// </summary>
        /// <value>มูลค่าเอกสารรวมภาษีแล้วหรือไม่</value>
        [DataMember(Name="isVatInclusive", EmitDefaultValue=true)]
        public bool IsVatInclusive { get; set; }

        /// <summary>
        /// รูปแบบส่วนลด 1 &#x3D;  เปอร์เซ็นต์ / 3 &#x3D; จำนวน (บาท)
        /// </summary>
        /// <value>รูปแบบส่วนลด 1 &#x3D;  เปอร์เซ็นต์ / 3 &#x3D; จำนวน (บาท)</value>
        [DataMember(Name="discountType", EmitDefaultValue=true)]
        public int DiscountType { get; set; }

        /// <summary>
        /// มูลค่าส่วนลดเป็นเปอร์เซ็นต์
        /// </summary>
        /// <value>มูลค่าส่วนลดเป็นเปอร์เซ็นต์</value>
        [DataMember(Name="discountPercentage", EmitDefaultValue=true)]
        public int DiscountPercentage { get; set; }

        /// <summary>
        /// มูลค่าส่วนลดเป็นจำนวน
        /// </summary>
        /// <value>มูลค่าส่วนลดเป็นจำนวน</value>
        [DataMember(Name="discountAmount", EmitDefaultValue=true)]
        public decimal DiscountAmount { get; set; }

        /// <summary>
        /// มูลค่ารวมเป็นเงิน
        /// </summary>
        /// <value>มูลค่ารวมเป็นเงิน</value>
        [DataMember(Name="subTotal", EmitDefaultValue=true)]
        public decimal SubTotal { get; set; }

        /// <summary>
        /// มูลค่าหลังหักส่วนลด
        /// </summary>
        /// <value>มูลค่าหลังหักส่วนลด</value>
        [DataMember(Name="totalAfterDiscount", EmitDefaultValue=true)]
        public decimal TotalAfterDiscount { get; set; }

        /// <summary>
        /// มูลค่าท้ายเอกสาร (รวม vat เสมอ)
        /// </summary>
        /// <value>มูลค่าท้ายเอกสาร (รวม vat เสมอ)</value>
        [DataMember(Name="grandTotal", EmitDefaultValue=true)]
        public decimal GrandTotal { get; set; }

        /// <summary>
        /// มูลค่าเอกสารก่อนภาษี
        /// </summary>
        /// <value>มูลค่าเอกสารก่อนภาษี</value>
        [DataMember(Name="totalWithoutVat", EmitDefaultValue=true)]
        public decimal TotalWithoutVat { get; set; }

        /// <summary>
        /// ภาษีมูลค่าเพิ่ม
        /// </summary>
        /// <value>ภาษีมูลค่าเพิ่ม</value>
        [DataMember(Name="vatAmount", EmitDefaultValue=true)]
        public decimal VatAmount { get; set; }

        /// <summary>
        /// แสดงหรือไแสดง หักณที่จ่ายท้ายบิล
        /// </summary>
        /// <value>แสดงหรือไแสดง หักณที่จ่ายท้ายบิล</value>
        [DataMember(Name="documentShowWithholdingTax", EmitDefaultValue=true)]
        public bool DocumentShowWithholdingTax { get; set; }

        /// <summary>
        /// ภาษี ณ ที่จ่าย (%)
        /// </summary>
        /// <value>ภาษี ณ ที่จ่าย (%)</value>
        [DataMember(Name="documentWithholdingTaxPercentage", EmitDefaultValue=true)]
        public int DocumentWithholdingTaxPercentage { get; set; }

        /// <summary>
        /// มูลค่าภาษีหักณที่จ่าย
        /// </summary>
        /// <value>มูลค่าภาษีหักณที่จ่าย</value>
        [DataMember(Name="documentWithholdingTaxAmount", EmitDefaultValue=true)]
        public decimal DocumentWithholdingTaxAmount { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name="remarks", EmitDefaultValue=true)]
        public string Remarks { get; set; }

        /// <summary>
        /// โน๊ตภายในบริษัท
        /// </summary>
        /// <value>โน๊ตภายในบริษัท</value>
        [DataMember(Name="internalNotes", EmitDefaultValue=true)]
        public string InternalNotes { get; set; }

        /// <summary>
        /// ลายเซ็นอิเล็กทรอนิกส์และตรายาง
        /// </summary>
        /// <value>ลายเซ็นอิเล็กทรอนิกส์และตรายาง</value>
        [DataMember(Name="showSignatureOrStamp", EmitDefaultValue=true)]
        public bool ShowSignatureOrStamp { get; set; }

        /// <summary>
        /// วิธีการชำระ 1 &#x3D; เงินสด / 3 &#x3D; เช็ค /  5 &#x3D; โอนเงิน , 7 &#x3D; เครดิต
        /// </summary>
        /// <value>วิธีการชำระ 1 &#x3D; เงินสด / 3 &#x3D; เช็ค /  5 &#x3D; โอนเงิน , 7 &#x3D; เครดิต</value>
        [DataMember(Name="paymentMethod", EmitDefaultValue=true)]
        public int PaymentMethod { get; set; }

        /// <summary>
        /// วันที่รับชำระเงิน รูปแบบ yyyy-MM-dd
        /// </summary>
        /// <value>วันที่รับชำระเงิน รูปแบบ yyyy-MM-dd</value>
        [DataMember(Name="paymentDate", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime PaymentDate { get; set; }

        /// <summary>
        /// รายละเอียดการเก็บเงิน
        /// </summary>
        /// <value>รายละเอียดการเก็บเงิน</value>
        [DataMember(Name="paymentRemarks", EmitDefaultValue=true)]
        public string PaymentRemarks { get; set; }

        /// <summary>
        /// ชื่อธนาคาร
        /// </summary>
        /// <value>ชื่อธนาคาร</value>
        [DataMember(Name="bankAccountName", EmitDefaultValue=true)]
        public string BankAccountName { get; set; }

        /// <summary>
        /// เลขที่ธนาคาร/บัตรเคดิต(สำหรับ MethodPayment : 5, 7)
        /// </summary>
        /// <value>เลขที่ธนาคาร/บัตรเคดิต(สำหรับ MethodPayment : 5, 7)</value>
        [DataMember(Name="bankAccountNumber", EmitDefaultValue=true)]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// จำนวนเงินที่เก็บ
        /// </summary>
        /// <value>จำนวนเงินที่เก็บ</value>
        [DataMember(Name="collected", EmitDefaultValue=true)]
        public decimal Collected { get; set; }

        /// <summary>
        /// ยอดหัก ณ ที่จ่าย
        /// </summary>
        /// <value>ยอดหัก ณ ที่จ่าย</value>
        [DataMember(Name="withheldAmount", EmitDefaultValue=true)]
        public decimal WithheldAmount { get; set; }

        /// <summary>
        /// หัก ณ ที่จ่าย
        /// </summary>
        /// <value>หัก ณ ที่จ่าย</value>
        [DataMember(Name="withheldPercentage", EmitDefaultValue=true)]
        public int WithheldPercentage { get; set; }

        /// <summary>
        /// ค่าธรรมเนียม
        /// </summary>
        /// <value>ค่าธรรมเนียม</value>
        [DataMember(Name="fee", EmitDefaultValue=true)]
        public decimal Fee { get; set; }

        /// <summary>
        /// Gets or Sets DocumentStructureType
        /// </summary>
        [DataMember(Name="documentStructureType", EmitDefaultValue=true)]
        public string DocumentStructureType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Document {\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  DocumentSerial: ").Append(DocumentSerial).Append("\n");
            sb.Append("  ContactCode: ").Append(ContactCode).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContactAddress: ").Append(ContactAddress).Append("\n");
            sb.Append("  ContactTaxId: ").Append(ContactTaxId).Append("\n");
            sb.Append("  ContactBranch: ").Append(ContactBranch).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  ContactNumber: ").Append(ContactNumber).Append("\n");
            sb.Append("  ContactZipCode: ").Append(ContactZipCode).Append("\n");
            sb.Append("  ContactGroup: ").Append(ContactGroup).Append("\n");
            sb.Append("  PublishedOn: ").Append(PublishedOn).Append("\n");
            sb.Append("  CreditType: ").Append(CreditType).Append("\n");
            sb.Append("  CreditDays: ").Append(CreditDays).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  SalesName: ").Append(SalesName).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  IsVatInclusive: ").Append(IsVatInclusive).Append("\n");
            sb.Append("  DiscountType: ").Append(DiscountType).Append("\n");
            sb.Append("  DiscountPercentage: ").Append(DiscountPercentage).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  TotalAfterDiscount: ").Append(TotalAfterDiscount).Append("\n");
            sb.Append("  GrandTotal: ").Append(GrandTotal).Append("\n");
            sb.Append("  TotalWithoutVat: ").Append(TotalWithoutVat).Append("\n");
            sb.Append("  VatAmount: ").Append(VatAmount).Append("\n");
            sb.Append("  DocumentShowWithholdingTax: ").Append(DocumentShowWithholdingTax).Append("\n");
            sb.Append("  DocumentWithholdingTaxPercentage: ").Append(DocumentWithholdingTaxPercentage).Append("\n");
            sb.Append("  DocumentWithholdingTaxAmount: ").Append(DocumentWithholdingTaxAmount).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  InternalNotes: ").Append(InternalNotes).Append("\n");
            sb.Append("  ShowSignatureOrStamp: ").Append(ShowSignatureOrStamp).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  PaymentRemarks: ").Append(PaymentRemarks).Append("\n");
            sb.Append("  BankAccountName: ").Append(BankAccountName).Append("\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("  Collected: ").Append(Collected).Append("\n");
            sb.Append("  WithheldAmount: ").Append(WithheldAmount).Append("\n");
            sb.Append("  WithheldPercentage: ").Append(WithheldPercentage).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  DocumentStructureType: ").Append(DocumentStructureType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Document);
        }

        /// <summary>
        /// Returns true if Document instances are equal
        /// </summary>
        /// <param name="input">Instance of Document to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Document input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.DocumentSerial == input.DocumentSerial ||
                    (this.DocumentSerial != null &&
                    this.DocumentSerial.Equals(input.DocumentSerial))
                ) && 
                (
                    this.ContactCode == input.ContactCode ||
                    (this.ContactCode != null &&
                    this.ContactCode.Equals(input.ContactCode))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.ContactAddress == input.ContactAddress ||
                    (this.ContactAddress != null &&
                    this.ContactAddress.Equals(input.ContactAddress))
                ) && 
                (
                    this.ContactTaxId == input.ContactTaxId ||
                    (this.ContactTaxId != null &&
                    this.ContactTaxId.Equals(input.ContactTaxId))
                ) && 
                (
                    this.ContactBranch == input.ContactBranch ||
                    (this.ContactBranch != null &&
                    this.ContactBranch.Equals(input.ContactBranch))
                ) && 
                (
                    this.ContactPerson == input.ContactPerson ||
                    (this.ContactPerson != null &&
                    this.ContactPerson.Equals(input.ContactPerson))
                ) && 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.ContactNumber == input.ContactNumber ||
                    (this.ContactNumber != null &&
                    this.ContactNumber.Equals(input.ContactNumber))
                ) && 
                (
                    this.ContactZipCode == input.ContactZipCode ||
                    (this.ContactZipCode != null &&
                    this.ContactZipCode.Equals(input.ContactZipCode))
                ) && 
                (
                    this.ContactGroup == input.ContactGroup ||
                    (this.ContactGroup != null &&
                    this.ContactGroup.Equals(input.ContactGroup))
                ) && 
                (
                    this.PublishedOn == input.PublishedOn ||
                    (this.PublishedOn != null &&
                    this.PublishedOn.Equals(input.PublishedOn))
                ) && 
                (
                    this.CreditType == input.CreditType ||
                    (this.CreditType != null &&
                    this.CreditType.Equals(input.CreditType))
                ) && 
                (
                    this.CreditDays == input.CreditDays ||
                    (this.CreditDays != null &&
                    this.CreditDays.Equals(input.CreditDays))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.SalesName == input.SalesName ||
                    (this.SalesName != null &&
                    this.SalesName.Equals(input.SalesName))
                ) && 
                (
                    this.ProjectName == input.ProjectName ||
                    (this.ProjectName != null &&
                    this.ProjectName.Equals(input.ProjectName))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.IsVatInclusive == input.IsVatInclusive ||
                    (this.IsVatInclusive != null &&
                    this.IsVatInclusive.Equals(input.IsVatInclusive))
                ) && 
                (
                    this.DiscountType == input.DiscountType ||
                    (this.DiscountType != null &&
                    this.DiscountType.Equals(input.DiscountType))
                ) && 
                (
                    this.DiscountPercentage == input.DiscountPercentage ||
                    (this.DiscountPercentage != null &&
                    this.DiscountPercentage.Equals(input.DiscountPercentage))
                ) && 
                (
                    this.DiscountAmount == input.DiscountAmount ||
                    (this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(input.DiscountAmount))
                ) && 
                (
                    this.SubTotal == input.SubTotal ||
                    (this.SubTotal != null &&
                    this.SubTotal.Equals(input.SubTotal))
                ) && 
                (
                    this.TotalAfterDiscount == input.TotalAfterDiscount ||
                    (this.TotalAfterDiscount != null &&
                    this.TotalAfterDiscount.Equals(input.TotalAfterDiscount))
                ) && 
                (
                    this.GrandTotal == input.GrandTotal ||
                    (this.GrandTotal != null &&
                    this.GrandTotal.Equals(input.GrandTotal))
                ) && 
                (
                    this.TotalWithoutVat == input.TotalWithoutVat ||
                    (this.TotalWithoutVat != null &&
                    this.TotalWithoutVat.Equals(input.TotalWithoutVat))
                ) && 
                (
                    this.VatAmount == input.VatAmount ||
                    (this.VatAmount != null &&
                    this.VatAmount.Equals(input.VatAmount))
                ) && 
                (
                    this.DocumentShowWithholdingTax == input.DocumentShowWithholdingTax ||
                    (this.DocumentShowWithholdingTax != null &&
                    this.DocumentShowWithholdingTax.Equals(input.DocumentShowWithholdingTax))
                ) && 
                (
                    this.DocumentWithholdingTaxPercentage == input.DocumentWithholdingTaxPercentage ||
                    (this.DocumentWithholdingTaxPercentage != null &&
                    this.DocumentWithholdingTaxPercentage.Equals(input.DocumentWithholdingTaxPercentage))
                ) && 
                (
                    this.DocumentWithholdingTaxAmount == input.DocumentWithholdingTaxAmount ||
                    (this.DocumentWithholdingTaxAmount != null &&
                    this.DocumentWithholdingTaxAmount.Equals(input.DocumentWithholdingTaxAmount))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.InternalNotes == input.InternalNotes ||
                    (this.InternalNotes != null &&
                    this.InternalNotes.Equals(input.InternalNotes))
                ) && 
                (
                    this.ShowSignatureOrStamp == input.ShowSignatureOrStamp ||
                    (this.ShowSignatureOrStamp != null &&
                    this.ShowSignatureOrStamp.Equals(input.ShowSignatureOrStamp))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.PaymentRemarks == input.PaymentRemarks ||
                    (this.PaymentRemarks != null &&
                    this.PaymentRemarks.Equals(input.PaymentRemarks))
                ) && 
                (
                    this.BankAccountName == input.BankAccountName ||
                    (this.BankAccountName != null &&
                    this.BankAccountName.Equals(input.BankAccountName))
                ) && 
                (
                    this.BankAccountNumber == input.BankAccountNumber ||
                    (this.BankAccountNumber != null &&
                    this.BankAccountNumber.Equals(input.BankAccountNumber))
                ) && 
                (
                    this.Collected == input.Collected ||
                    (this.Collected != null &&
                    this.Collected.Equals(input.Collected))
                ) && 
                (
                    this.WithheldAmount == input.WithheldAmount ||
                    (this.WithheldAmount != null &&
                    this.WithheldAmount.Equals(input.WithheldAmount))
                ) && 
                (
                    this.WithheldPercentage == input.WithheldPercentage ||
                    (this.WithheldPercentage != null &&
                    this.WithheldPercentage.Equals(input.WithheldPercentage))
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.DocumentStructureType == input.DocumentStructureType ||
                    (this.DocumentStructureType != null &&
                    this.DocumentStructureType.Equals(input.DocumentStructureType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.DocumentSerial != null)
                    hashCode = hashCode * 59 + this.DocumentSerial.GetHashCode();
                if (this.ContactCode != null)
                    hashCode = hashCode * 59 + this.ContactCode.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.ContactAddress != null)
                    hashCode = hashCode * 59 + this.ContactAddress.GetHashCode();
                if (this.ContactTaxId != null)
                    hashCode = hashCode * 59 + this.ContactTaxId.GetHashCode();
                if (this.ContactBranch != null)
                    hashCode = hashCode * 59 + this.ContactBranch.GetHashCode();
                if (this.ContactPerson != null)
                    hashCode = hashCode * 59 + this.ContactPerson.GetHashCode();
                if (this.ContactEmail != null)
                    hashCode = hashCode * 59 + this.ContactEmail.GetHashCode();
                if (this.ContactNumber != null)
                    hashCode = hashCode * 59 + this.ContactNumber.GetHashCode();
                if (this.ContactZipCode != null)
                    hashCode = hashCode * 59 + this.ContactZipCode.GetHashCode();
                if (this.ContactGroup != null)
                    hashCode = hashCode * 59 + this.ContactGroup.GetHashCode();
                if (this.PublishedOn != null)
                    hashCode = hashCode * 59 + this.PublishedOn.GetHashCode();
                if (this.CreditType != null)
                    hashCode = hashCode * 59 + this.CreditType.GetHashCode();
                if (this.CreditDays != null)
                    hashCode = hashCode * 59 + this.CreditDays.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.SalesName != null)
                    hashCode = hashCode * 59 + this.SalesName.GetHashCode();
                if (this.ProjectName != null)
                    hashCode = hashCode * 59 + this.ProjectName.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.IsVatInclusive != null)
                    hashCode = hashCode * 59 + this.IsVatInclusive.GetHashCode();
                if (this.DiscountType != null)
                    hashCode = hashCode * 59 + this.DiscountType.GetHashCode();
                if (this.DiscountPercentage != null)
                    hashCode = hashCode * 59 + this.DiscountPercentage.GetHashCode();
                if (this.DiscountAmount != null)
                    hashCode = hashCode * 59 + this.DiscountAmount.GetHashCode();
                if (this.SubTotal != null)
                    hashCode = hashCode * 59 + this.SubTotal.GetHashCode();
                if (this.TotalAfterDiscount != null)
                    hashCode = hashCode * 59 + this.TotalAfterDiscount.GetHashCode();
                if (this.GrandTotal != null)
                    hashCode = hashCode * 59 + this.GrandTotal.GetHashCode();
                if (this.TotalWithoutVat != null)
                    hashCode = hashCode * 59 + this.TotalWithoutVat.GetHashCode();
                if (this.VatAmount != null)
                    hashCode = hashCode * 59 + this.VatAmount.GetHashCode();
                if (this.DocumentShowWithholdingTax != null)
                    hashCode = hashCode * 59 + this.DocumentShowWithholdingTax.GetHashCode();
                if (this.DocumentWithholdingTaxPercentage != null)
                    hashCode = hashCode * 59 + this.DocumentWithholdingTaxPercentage.GetHashCode();
                if (this.DocumentWithholdingTaxAmount != null)
                    hashCode = hashCode * 59 + this.DocumentWithholdingTaxAmount.GetHashCode();
                if (this.Remarks != null)
                    hashCode = hashCode * 59 + this.Remarks.GetHashCode();
                if (this.InternalNotes != null)
                    hashCode = hashCode * 59 + this.InternalNotes.GetHashCode();
                if (this.ShowSignatureOrStamp != null)
                    hashCode = hashCode * 59 + this.ShowSignatureOrStamp.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PaymentDate != null)
                    hashCode = hashCode * 59 + this.PaymentDate.GetHashCode();
                if (this.PaymentRemarks != null)
                    hashCode = hashCode * 59 + this.PaymentRemarks.GetHashCode();
                if (this.BankAccountName != null)
                    hashCode = hashCode * 59 + this.BankAccountName.GetHashCode();
                if (this.BankAccountNumber != null)
                    hashCode = hashCode * 59 + this.BankAccountNumber.GetHashCode();
                if (this.Collected != null)
                    hashCode = hashCode * 59 + this.Collected.GetHashCode();
                if (this.WithheldAmount != null)
                    hashCode = hashCode * 59 + this.WithheldAmount.GetHashCode();
                if (this.WithheldPercentage != null)
                    hashCode = hashCode * 59 + this.WithheldPercentage.GetHashCode();
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.DocumentStructureType != null)
                    hashCode = hashCode * 59 + this.DocumentStructureType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
