/* 
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2-oas3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Flowaccount.OpenAPITools.Client.OpenAPIDateConverter;

namespace Flowaccount.OpenAPITools.Model
{
    /// <summary>
    /// InlineDocumentAllOf
    /// </summary>
    [DataContract]
    public partial class InlineDocumentAllOf :  IEquatable<InlineDocumentAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineDocumentAllOf" /> class.
        /// </summary>
        /// <param name="useInlineDiscount">ใช้งาน inline discount ส่วนลดแยกตามรายการสินค้า (default to true).</param>
        /// <param name="useInlineVat">ใช้ inline vat ส่วนลดและภาษี แยกตามรายการสินค้า.</param>
        /// <param name="exemptAmount">ยอดขายที่ยกเว้นภาษีมูลค่าเพิ่ม (default to 0M).</param>
        /// <param name="vatableAmount">ยอดขายที่คิดภาษีมูลค่าเพิ่ม (default to 0M).</param>
        /// <param name="items">items.</param>
        /// <param name="documentReferences">documentReferences.</param>
        public InlineDocumentAllOf(bool useInlineDiscount = true, bool useInlineVat = default(bool), decimal? exemptAmount = 0M, decimal? vatableAmount = 0M, List<InlineProductItem> items = default(List<InlineProductItem>), List<UpgradeDocument> documentReferences = default(List<UpgradeDocument>))
        {
            this.ExemptAmount = exemptAmount;
            this.VatableAmount = vatableAmount;
            // use default value if no "useInlineDiscount" provided
            if (useInlineDiscount == null)
            {
                this.UseInlineDiscount = true;
            }
            else
            {
                this.UseInlineDiscount = useInlineDiscount;
            }
            this.UseInlineVat = useInlineVat;
            // use default value if no "exemptAmount" provided
            if (exemptAmount == null)
            {
                this.ExemptAmount = 0M;
            }
            else
            {
                this.ExemptAmount = exemptAmount;
            }
            // use default value if no "vatableAmount" provided
            if (vatableAmount == null)
            {
                this.VatableAmount = 0M;
            }
            else
            {
                this.VatableAmount = vatableAmount;
            }
            this.Items = items;
            this.DocumentReferences = documentReferences;
        }
        
        /// <summary>
        /// ใช้งาน inline discount ส่วนลดแยกตามรายการสินค้า
        /// </summary>
        /// <value>ใช้งาน inline discount ส่วนลดแยกตามรายการสินค้า</value>
        [DataMember(Name="useInlineDiscount", EmitDefaultValue=true)]
        public bool UseInlineDiscount { get; set; }

        /// <summary>
        /// ใช้ inline vat ส่วนลดและภาษี แยกตามรายการสินค้า
        /// </summary>
        /// <value>ใช้ inline vat ส่วนลดและภาษี แยกตามรายการสินค้า</value>
        [DataMember(Name="useInlineVat", EmitDefaultValue=true)]
        public bool UseInlineVat { get; set; }

        /// <summary>
        /// ยอดขายที่ยกเว้นภาษีมูลค่าเพิ่ม
        /// </summary>
        /// <value>ยอดขายที่ยกเว้นภาษีมูลค่าเพิ่ม</value>
        [DataMember(Name="exemptAmount", EmitDefaultValue=true)]
        public decimal? ExemptAmount { get; set; }

        /// <summary>
        /// ยอดขายที่คิดภาษีมูลค่าเพิ่ม
        /// </summary>
        /// <value>ยอดขายที่คิดภาษีมูลค่าเพิ่ม</value>
        [DataMember(Name="vatableAmount", EmitDefaultValue=true)]
        public decimal? VatableAmount { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=true)]
        public List<InlineProductItem> Items { get; set; }

        /// <summary>
        /// Gets or Sets DocumentReferences
        /// </summary>
        [DataMember(Name="documentReferences", EmitDefaultValue=true)]
        public List<UpgradeDocument> DocumentReferences { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineDocumentAllOf {\n");
            sb.Append("  UseInlineDiscount: ").Append(UseInlineDiscount).Append("\n");
            sb.Append("  UseInlineVat: ").Append(UseInlineVat).Append("\n");
            sb.Append("  ExemptAmount: ").Append(ExemptAmount).Append("\n");
            sb.Append("  VatableAmount: ").Append(VatableAmount).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  DocumentReferences: ").Append(DocumentReferences).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineDocumentAllOf);
        }

        /// <summary>
        /// Returns true if InlineDocumentAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineDocumentAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineDocumentAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UseInlineDiscount == input.UseInlineDiscount ||
                    (this.UseInlineDiscount != null &&
                    this.UseInlineDiscount.Equals(input.UseInlineDiscount))
                ) && 
                (
                    this.UseInlineVat == input.UseInlineVat ||
                    (this.UseInlineVat != null &&
                    this.UseInlineVat.Equals(input.UseInlineVat))
                ) && 
                (
                    this.ExemptAmount == input.ExemptAmount ||
                    (this.ExemptAmount != null &&
                    this.ExemptAmount.Equals(input.ExemptAmount))
                ) && 
                (
                    this.VatableAmount == input.VatableAmount ||
                    (this.VatableAmount != null &&
                    this.VatableAmount.Equals(input.VatableAmount))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.DocumentReferences == input.DocumentReferences ||
                    this.DocumentReferences != null &&
                    input.DocumentReferences != null &&
                    this.DocumentReferences.SequenceEqual(input.DocumentReferences)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UseInlineDiscount != null)
                    hashCode = hashCode * 59 + this.UseInlineDiscount.GetHashCode();
                if (this.UseInlineVat != null)
                    hashCode = hashCode * 59 + this.UseInlineVat.GetHashCode();
                if (this.ExemptAmount != null)
                    hashCode = hashCode * 59 + this.ExemptAmount.GetHashCode();
                if (this.VatableAmount != null)
                    hashCode = hashCode * 59 + this.VatableAmount.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.DocumentReferences != null)
                    hashCode = hashCode * 59 + this.DocumentReferences.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
