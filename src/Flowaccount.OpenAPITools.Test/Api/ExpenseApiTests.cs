/* 
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2-oas3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Flowaccount.OpenAPITools.Client;
using Flowaccount.OpenAPITools.Api;
using Flowaccount.OpenAPITools.Model;

namespace Flowaccount.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing ExpenseApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ExpenseApiTests
    {
        private ExpenseApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ExpenseApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ExpenseApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ExpenseApi
            //Assert.IsInstanceOf(typeof(ExpenseApi), instance);
        }

        
        /// <summary>
        /// Test ExpensesCategoriesAccountingGet
        /// </summary>
        [Test]
        public void ExpensesCategoriesAccountingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //var response = instance.ExpensesCategoriesAccountingGet(authorization);
            //Assert.IsInstanceOf(typeof(BusinessCategory), response, "response is BusinessCategory");
        }
        
        /// <summary>
        /// Test ExpensesCategoriesBusinessGet
        /// </summary>
        [Test]
        public void ExpensesCategoriesBusinessGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //var response = instance.ExpensesCategoriesBusinessGet(authorization);
            //Assert.IsInstanceOf(typeof(BusinessCategory), response, "response is BusinessCategory");
        }
        
        /// <summary>
        /// Test ExpensesInlinePost
        /// </summary>
        [Test]
        public void ExpensesInlinePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //ExpenseInlineDocument expenseInlineDocument = null;
            //var response = instance.ExpensesInlinePost(authorization, expenseInlineDocument);
            //Assert.IsInstanceOf(typeof(ExpensenlineDocumentResponse), response, "response is ExpensenlineDocumentResponse");
        }
        
        /// <summary>
        /// Test ExpensesPost
        /// </summary>
        [Test]
        public void ExpensesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //ExpenseDocument expenseDocument = null;
            //var response = instance.ExpensesPost(authorization, expenseDocument);
            //Assert.IsInstanceOf(typeof(ExpenseDocumentResponse), response, "response is ExpenseDocumentResponse");
        }
        
    }

}
