/* 
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2-oas3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Flowaccount.OpenAPITools.Client;
using Flowaccount.OpenAPITools.Api;
using Flowaccount.OpenAPITools.Model;

namespace Flowaccount.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing TaxInvoiceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TaxInvoiceApiTests
    {
        private TaxInvoiceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TaxInvoiceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TaxInvoiceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' TaxInvoiceApi
            //Assert.IsInstanceOf(typeof(TaxInvoiceApi), instance);
        }

        
        /// <summary>
        /// Test TaxInvoicesGet
        /// </summary>
        [Test]
        public void TaxInvoicesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string currentPage = null;
            //string pageSize = null;
            //string authorization = null;
            //string sortBy = null;
            //string filter = null;
            //var response = instance.TaxInvoicesGet(currentPage, pageSize, authorization, sortBy, filter);
            //Assert.IsInstanceOf(typeof(SimpleDocumentResponse), response, "response is SimpleDocumentResponse");
        }
        
        /// <summary>
        /// Test TaxInvoicesIdAttachmentPost
        /// </summary>
        [Test]
        public void TaxInvoicesIdAttachmentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string id = null;
            //System.IO.Stream file = null;
            //instance.TaxInvoicesIdAttachmentPost(authorization, id, file);
            
        }
        
        /// <summary>
        /// Test TaxInvoicesIdGet
        /// </summary>
        [Test]
        public void TaxInvoicesIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string id = null;
            //var response = instance.TaxInvoicesIdGet(authorization, id);
            //Assert.IsInstanceOf(typeof(SimpleDocumentResponse), response, "response is SimpleDocumentResponse");
        }
        
        /// <summary>
        /// Test TaxInvoicesIdInlinePut
        /// </summary>
        [Test]
        public void TaxInvoicesIdInlinePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string id = null;
            //InlineDocument inlineDocument = null;
            //var response = instance.TaxInvoicesIdInlinePut(authorization, id, inlineDocument);
            //Assert.IsInstanceOf(typeof(InlineDocumentResponse), response, "response is InlineDocumentResponse");
        }
        
        /// <summary>
        /// Test TaxInvoicesIdPut
        /// </summary>
        [Test]
        public void TaxInvoicesIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string id = null;
            //SimpleDocument simpleDocument = null;
            //var response = instance.TaxInvoicesIdPut(authorization, id, simpleDocument);
            //Assert.IsInstanceOf(typeof(SimpleDocumentResponse), response, "response is SimpleDocumentResponse");
        }
        
        /// <summary>
        /// Test TaxInvoicesInlinePost
        /// </summary>
        [Test]
        public void TaxInvoicesInlinePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //InlineDocument inlineDocument = null;
            //var response = instance.TaxInvoicesInlinePost(authorization, inlineDocument);
            //Assert.IsInstanceOf(typeof(InlineDocumentResponse), response, "response is InlineDocumentResponse");
        }
        
        /// <summary>
        /// Test TaxInvoicesPost
        /// </summary>
        [Test]
        public void TaxInvoicesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //SimpleDocument simpleDocument = null;
            //var response = instance.TaxInvoicesPost(authorization, simpleDocument);
            //Assert.IsInstanceOf(typeof(SimpleDocumentResponse), response, "response is SimpleDocumentResponse");
        }
        
    }

}
